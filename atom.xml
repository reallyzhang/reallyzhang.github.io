<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.reallyzhang.com</id>
    <title>一张真人</title>
    <updated>2019-07-27T10:53:06.337Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.reallyzhang.com"/>
    <link rel="self" href="https://www.reallyzhang.com/atom.xml"/>
    <subtitle>稳定的心态和习惯，在日常练习中熟能生巧，长此以往，必然持续高效输出</subtitle>
    <logo>https://www.reallyzhang.com/images/avatar.png</logo>
    <icon>https://www.reallyzhang.com/favicon.ico</icon>
    <rights>All rights reserved 2019, 一张真人</rights>
    <entry>
        <title type="html"><![CDATA[NodeJs学习笔记]]></title>
        <id>https://www.reallyzhang.com/post/2M_ACmXnP</id>
        <link href="https://www.reallyzhang.com/post/2M_ACmXnP">
        </link>
        <updated>2019-07-18T00:48:47.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="1-jscript顶层对象windownode顶层对象是global对象">1. jscript顶层对象window,node顶层对象是global对象；</h2>
]]></summary>
        <content type="html"><![CDATA[<h2 id="1-jscript顶层对象windownode顶层对象是global对象">1. jscript顶层对象window,node顶层对象是global对象；</h2>
<!-- more -->
<pre><code class="language-js">
var a=100;
//window.a=100;

global.a=undefined;

</code></pre>
<h2 id="2-nodejs中模块的概念-一个文件就是一个模块每个模块都有自己的作用域">2. nodejs中模块的概念 一个文件就是一个模块，每个模块都有自己的作用域;</h2>
<ul>
<li>当前文件路径：__filename；</li>
</ul>
<pre><code class="language-js">
console.log(__filename);

</code></pre>
<ul>
<li>模块加载机制：（路径填写--相对路径或绝对路径）</li>
</ul>
<pre><code class="language-js">
//相对路径如果不加‘./’，node会去加载核心模块；
require('./');

//路径不加后缀，会先查找文件名apple，如果没有找到会默认添加.js , 而后再.json , 再.node
require('./apple');


</code></pre>
<h2 id="3-模块加载-变量的使用">3. 模块加载-变量的使用</h2>
<ul>
<li>变量作用域是当前模块，外部不能直接访问</li>
</ul>
<ol>
<li>访问方式：全局挂载：</li>
</ol>
<pre><code class="language-js">global.a=100;  

</code></pre>
<ol start="2">
<li>使用模块对象 :require('./apple.js')方法会返回exports</li>
</ol>
<pre><code class="language-js">
console.log(module);


{
    id:'',
    exports:{}, 
    parent:null,
    filename:'',
    children:[{id=&quot;&quot;,exports:{},parent,filename...}],

}

module.exports===exports;//true，因为exports的作用域在当前模块

module.exports.apple=&quot;乔布斯&quot;;



module.exports=[1,2,3]; //exports和module.exports指向关系断开了，不推荐

module.exports.a=6;//exports等号赋值后，再挂载其它属性无效

</code></pre>
<h5 id="exports推荐挂载属性不推荐直接赋值">exports推荐挂载属性，不推荐直接赋值</h5>
<h2 id="4-常用api-global">4. 常用API----global</h2>
<pre><code class="language-js">
__filename:''; //模块作用域，非全局属性，表示当前模块被解析后的绝对路径；
__filename:''; //模块作用域，非全局属性，表示当前模块所在目录被解析后的绝对路径；


Date();
setTimeOut();
setInterval();

</code></pre>
<h2 id="5-其它常用api">5. 其它常用API</h2>
<pre><code>global.process//全局对象
console.log(process);
console.log()；

process.stdin、process.stdout 标准输入输出流 （IO）
</code></pre>
<pre><code class="language-js">    let a;
    let b;
    process.stdin.resume();
    process.stdout.write('【心动时刻】爱情保鲜测量仪...'+'请输入你的名字：');
    process.stdin.on(&quot;data&quot;,(chunk)=&gt;{
    if(!a){
        a=chunk;
        process.stdout.write('请输入你爱人的名字：');
    }else{
        b=chunk;
        process.stdout.write(a+'@'+b+'你们的爱情保鲜一万年！');
    }   
});
</code></pre>
<pre><code>process.argv(node,.js文件名,以此是命令行参数) //包含命令行参数的数组
    1. node.exe;
    2. 当前.js文件名；
    3. 接下来依次是命令行参数

process.execPath 开启当前进程的node的绝对路径


process.env 用户环境信息

process.version node版本

process.versions node以及node依赖包的版本信息

process.pid 当前进程pid

process.title 进程显示名称(getter/setter)

process.arch cpu处理器架构 arm/ia32/x64

process.latform 操作系统

process.cwd 进程工作目录

process.chdir 改变当前进程的工作目录

process.memoryUsage() 内存使用情况 byte

process.exit(code)

process.kill(pid);
</code></pre>
<ol start="7">
<li>Buffer 全局类，文件读取，操作二进制数据流，网络数据读取</li>
</ol>
<pre><code class="language-js">
    new Buffer(size);//长度固定，不能更改；

    new Buffer([1,2,3]);//字节数组，长度固定

    new Buffer(string,encoding);//encoding默认'utf-8'


    //字节长度和字符串长度的区别 bf.length字节长度
    var bf=new Buffer('miaoV','utf-8');
    for(var i=0;i&lt;bf.length;i++){
        console.log(bf[i].tostring(16));//以16进制输出
        console.log(String.fromCharCode(bf[i]));//以字节形式输出：m i a o V
    }

    var str1='miaov';
    var bf1=new Buffer(str1);

    console.log(str1.length);//5
    console.log(bf1.length);//5
    console.log(str1[0]);
    var str2=&quot;妙味&quot;；
    var bf2=new Buffer(str2);

    console.log(str2.length);//2
    console.log(bf2.length);//6 字节长度：一个中文占3个字节
    var buf=new Buffer(1024);



    buf.write(string,offset起始,length长度,encoding);

    buf.tostring('utf-8',1,2);//start end


    buf.slice(start,end); //返回新buf会和老buf指向相同的内存地址；

    buf.copy();//返回新buf，指向新内存地址；

    buf.copy(目标buf,新buf start,新buf end);


    Buffer.isEncoding('utf-8');//是否支持编码

    Buffer.isBuffer();
    //Buffer.by

</code></pre>
<ol start="8">
<li>File System文件系统</li>
</ol>
<pre><code>    var fs=require('fs');//引入文件系统
    
    /**
    * 异步方法，通过callback继续操作 非阻塞
    * path 路径
    * flags 打开方式 读/写 r/w
    * mode  文件模式 读/写/执行  4/2/1
    * callback (err,fd) 错误信息，文件标识，定时器
    */
    fs.open(path,flags,[mode],callback); //路径 打开方式读、写

    eg: fs.open('1.txt','r',function);

    /**
    * 同步方法，通过返回值继续操作 阻塞
    */
    fs.openSync(path,flags,[mode]);


    fs.open('1.txt','r',function(err,fd){

        fs.read(fd,new Buffer(10),offset bf偏移量,length内容长度,position 读取fd起始值，function(err,bf.length写入长度,bf){

        });

    })

    /**
    * 打开文件之后读取文件内容
    * fd 
    * bf 
    * offset bf起始位置
    * length 读取长度
    * position 从fd第几位开始
    * callback （err,bf.length,bf）
    */
    fs.read();

    /**
    * 同步读取
    */
    fs.readSync();

    /**
    * 打开文件之后读取文件内容 open模式为 'r+'模式
    * fd 开发返回的fd
    * bf 需要写入的bf
    * offset bf起始位置
    * length 读取长度
    * position 从fd第几位开始
    * callback （err,bf.length,bf）
    */
    fs.write(fd,bf,offset,length,fd的起始，callback)



    /**写字符串
    */
    fs.write(fd,bf,offset,length,fd的起始，callback)；

    fs.close(fd,function(){

    });

    //不用open 会覆盖
    fs.writeFile(filename,string,callback);


    fs.writeFileSync();

    //追加,会新建
    fs.appendFile(filename,string)

    fs.exists(filename,callback)


    fs.readFile

    fs.unlink

    fs.raname

    fs.stat 文件信息

    fs.watch 观察路径改变


    fs.mkdir(path，function)


    fs.rmdir

    fs.readdir

    
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Pages博客一站式集成客户端----Gridea]]></title>
        <id>https://www.reallyzhang.com/post/Kzb7glRqk</id>
        <link href="https://www.reallyzhang.com/post/Kzb7glRqk">
        </link>
        <updated>2019-07-14T02:17:37.000Z</updated>
        <summary type="html"><![CDATA[<h3 id="写在前面">写在前面</h3>
<p>工作几年，几经折腾，捯饬过Github Pages博客，也自己购买过服务器写过前端几个页面，都半途而废了吧，嫌弃Hexo 和 jekyll 配置繁琐各种坑，创作环境原始等，还自己折腾过用React来搭建GitHubPage ，最终都因为各种不能将就的原因放弃了...</p>
]]></summary>
        <content type="html"><![CDATA[<h3 id="写在前面">写在前面</h3>
<p>工作几年，几经折腾，捯饬过Github Pages博客，也自己购买过服务器写过前端几个页面，都半途而废了吧，嫌弃Hexo 和 jekyll 配置繁琐各种坑，创作环境原始等，还自己折腾过用React来搭建GitHubPage ，最终都因为各种不能将就的原因放弃了...</p>
<!-- more -->
<pre><code>	最近在学nodejs，准备写个博客后台练练手，说来也是奇怪好像和个人博客杠上了，每次学新东西都想写个博客系统，悲剧的是每次都很快结束了，😭😭半途而废这不是我的风格，希望这次能把这个项目做完吧。
</code></pre>
<p>本来已经对Gihub Page麻木的我，在看到他人推荐文字中 ‘客户端’ 三个字的时候还是垂死病中惊坐起，上手体验一番，真香！</p>
<p>Gridea官网：https://gridea.dev/</p>
<h3 id="扶我起来我还能干">扶我起来，我还能干</h3>
<p><img src="https://www.reallyzhang.com/post-images/1563072339542.png" alt="Gridea"></p>
<p>怎么样，看上去是不是很有胃口。都是可视化的配置，还有写文章的编辑器，真的是很完美了，赶紧上手了一下编辑器，标签，封面图等等个性化的配置和Markdown支持都可以算得上业界良心了吧。</p>
<p>文章管理，主题配置，菜单管理，评论配置等等也都能满足你的需求...</p>
<h3 id="跳过的坑">跳过的坑</h3>
<p>其它我就不剧透了，感兴趣自己去探索吧。下面把自己配置时几乎要抓狂的坑记录一下，希望对你能有所帮助：</p>
<ol>
<li>仓库不是填写仓库地址，而是仓库名。</li>
</ol>
<p><img src="https://www.reallyzhang.com/post-images/1563074630554.jpg" alt="token需要去Github上申请"></p>
<pre><code>	token是要去Github上申请，点击头像--&gt;setting--&gt;Developer settings--&gt; Personal access tokens （具体参考下面一张图）
</code></pre>
<ol start="2">
<li>
<p>除了token新建时我是全部选择，担心后面需要缺失什么权限，影响功能。另外就是在配置github第三方登录OAuth Apps的callback url这里的坑，一直报error=redirect_uri_mismatch错，登录不成功。最后发现自己域名在配置回调域名的时候习惯性地加了www，导致回调地址不匹配。我在这里找了三个小时的问题，偶然间忘加www才成功的，当然这里也可能跟我域名解析配置有关，所以只做为参考，不是标准答案。<strong>使用自己的域名配置回调地址时候不加www</strong></p>
<p><img src="https://www.reallyzhang.com/post-images/1563074473409.png" alt="github"></p>
<pre><code>  当然其它人也有其它解决方案，这里放个issues连接，当你遇到回调的问题是可以参考：https://github.com/gitalk/gitalk/issues/162
</code></pre>
</li>
</ol>
<h3 id="尾声">尾声</h3>
<p>我想从此以后我都可以不用折腾Github Pages了吧，可以安心写博客了。后面有机会倒是应该写一个自己的主题才算完美。</p>
<p>最后展示劳动成果吧，使用的是lemon主题，自己写了一点css样式覆盖了部分默认样式。
<img src="https://www.reallyzhang.com/post-images/1563076589834.png" alt="reallyzhang.com"></p>
<p>只是我并没有改写主题源代码，只在底部版权信息这块添加的了覆盖样式：
<img src="https://www.reallyzhang.com/post-images/1563076958538.png" alt="">
最后附上覆盖css样式，祝你一路畅通哦。</p>
<pre><code class="language-css">&lt;!--覆盖默认样式--&gt;
&lt;style type=&quot;text/css&quot;&gt;
			.header {   
					height:64px !important;
			}
			.post-title{
					border:none !important;
			}
			.btn-text{    
					width: 80px;
					height: 18px;
					overflow: hidden;
			}
			.site-title h1{
					font-weight:400 !important;
					margin-left:10px !important;
					margin-right:0 !inportant;
			}

			.id_card .id_card-avatar{
					padding:4px !important;
			}
			.post-content-abstract{
					max-width: 600px !important;
					max-height: 100px !important;
					overflow: hidden;
			}
			.post-content-abstract *{
					font-size:14px !important;
					display:inline-block !important;
					margin:0 0 2px 0 !important;
					font-weight:300 !important;
			}

&lt;/style&gt;

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[PDF在线阅读]]></title>
        <id>https://www.reallyzhang.com/post/6UF1l29b2</id>
        <link href="https://www.reallyzhang.com/post/6UF1l29b2">
        </link>
        <updated>2019-07-13T03:55:47.000Z</updated>
        <content type="html"><![CDATA[<p>规划：</p>
<p>阅读：
复制粘贴；
笔记：</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[共享创意宣言]]></title>
        <id>https://www.reallyzhang.com/post/ZDg9YSAej</id>
        <link href="https://www.reallyzhang.com/post/ZDg9YSAej">
        </link>
        <updated>2019-07-13T03:26:38.000Z</updated>
        <summary type="html"><![CDATA[<p>把自己想到但是自己又无能为力又特别希望变成现实的创意发在这里，然后让有缘人看到并实施，发布者不奢求得到什么回馈但要求实施者必须署名...</p>
]]></summary>
        <content type="html"><![CDATA[<p>把自己想到但是自己又无能为力又特别希望变成现实的创意发在这里，然后让有缘人看到并实施，发布者不奢求得到什么回馈但要求实施者必须署名...</p>
 <!-- more --> 
<h2 id="宣言">宣言：</h2>
<h3 id="我发布一个创意只愿它变成实现的时候能看到我的名字别无他求">我发布一个创意，只愿它变成实现的时候能看到我的名字，别无他求。</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每天八件事]]></title>
        <id>https://www.reallyzhang.com/post/iugfv_orR</id>
        <link href="https://www.reallyzhang.com/post/iugfv_orR">
        </link>
        <updated>2019-07-13T01:00:35.000Z</updated>
        <summary type="html"><![CDATA[<p>稳定的心态和习惯，在日常的练习中熟能生巧，长此以往，效率也高，输出也高。</p>
]]></summary>
        <content type="html"><![CDATA[<p>稳定的心态和习惯，在日常的练习中熟能生巧，长此以往，效率也高，输出也高。</p>
<!-- more --> 
<h1 id="正文">正文</h1>
<h3 id="作息11点半之前睡七点之前起">作息：11点半之前睡，七点之前起；</h3>
<h3 id="八件事">八件事</h3>
<ol>
<li>搞卫生（整理房间，洗衣服等）；</li>
<li>做早餐；</li>
<li>看书写笔记；</li>
<li>午休；</li>
<li>洗澡；</li>
<li>做晚餐；</li>
<li>抄书写字；</li>
<li>痛点输出；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://www.reallyzhang.com/post/about</id>
        <link href="https://www.reallyzhang.com/post/about">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<p>这是关于的页面，可以在这里向世界介绍你！</p>
]]></content>
    </entry>
</feed>